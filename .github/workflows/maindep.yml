# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy MY_BANK to Amazon ECS

on:
  schedule:
    # Runs at 22:30 UTC every day
    - cron: "30 22 * * *"
  workflow_dispatch:

  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Build with Maven
      run: mvn clean package -DskipTests


    - name: Upload JAR to EC2 via SSH
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        source: "target/mybankapp.jar"
        target: "~/mybankapp.jar"

    - name: Deploy on EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker rm -f bankapp || true
          docker rmi bankappimage || true
          
          echo "FROM eclipse-temurin:21-jdk" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY mybankapp.jar/target/mybankapp.jar mybankapp.jar" >> Dockerfile
          echo 'ENTRYPOINT ["java", "-jar", "mybankapp.jar"]' >> Dockerfile
          docker build -t ${{ secrets.DOCKER_IMAGE }} .
          docker run -d -p 8083:8083 --name bankapp \
            -e DB_HOST=${{secrets.DB_HOST}} \
            -e DB_USER=${{secrets.DB_USER}} \
            -e DB_PASS=${{secrets.DB_PASS}} \
            -e MAIL_USER=${{secrets.MAIL_USER}} \
            -e MAIL_PASS=${{secrets.MAIL_PASS}} \
            ${{ secrets.DOCKER_IMAGE }}
